function phpswitch() {
  local vers=
  local verpaths=
  local i=0

  # First of all we need to find out what versions we have installed.
  while read -r verpath; do

    if [[ $verpath = "php5-"* ]]; then
      # Get the PHP info from the path.
      # Prefix - PHP Version - Date - Time
      local parts=(${verpath//-/ })

      # Get the PHP version in the format XY and add it to the list.
      local ver=${parts[1]//./}
      ver=${ver:0:2}
      vers[$i]="$ver"
      verpaths[$i]="$verpath"
      ((i++))
    fi

  done < <(command ls /usr/local)

  # Join the versions with a space and make tab completion
  # so we can easily see which versions are available to use.
  local versstr=$(printf " %s" "${vers[@]}")
  complete -o "nospace" -W "${versstr:1}" phpswitch

  # If this is the initial refresh call to set up the tab completion, don't actually do anthing.
  [[ "refresh" == $1 ]] && return 0

  # Just count backwards again.
  for (( i--; i >= 0; i-- )); do
    if [[ $1 == ${vers[$i]} ]]; then
      command rm /usr/local/php5
      command ln -s /usr/local/${verpaths[$i]} /usr/local/php5
      echo "PHP version set to: $(php <<< '<?php echo PHP_VERSION;')"
      return 0
    fi
  done

  # Show the available versions.
  echo "Available versions: ${vers[@]}";
}

# Output a stripped vagrant global-status and add tab completion for vagrant box ids for custom vagrant aliases.
function vglobal-status() {
  local reading=0
  local status=
  local ids=

  case "$1" in
    # Prune the vagrant boxes global status cache if requested.
    prune) vagrant global-status --prune > /dev/null 2>&1 ;;

    # Filter by status.
    aborted|poweroff|running|suspended) status="$1" ;;
  esac

  echo # Add some space for readability.

  while read -r line; do

    # Wait for the entries to start and stop when we reach the empty line.
    case "$line" in
      "-"*) reading=1; continue ;; # Next line has the first id.
      "") break ;; # Looks like we've finished reading all the ids.
    esac

    # If we're not reading ids yet, get the next line.
    [ "$reading" -eq 0 ] && continue

    # Get the id from this line and add it to the array.
    local id=(${line// / })
    ids=(${ids[@]} ${id[0]})

    # Output the current line.
    [[ -z $status || $line = *" $status "* ]] && echo "$line"

  done < <(vagrant global-status)

  # Join the ids with a space and make tab completions for our custom aliases.
  ids=$(printf " %s" "${ids[@]}")
  complete -o "nospace" -W "${ids:1}" vstatus vup vreload vhalt vssh vdestroy vsuspend vresume
  complete -o "nospace" -W "aborted poweroff running suspended prune" vglobal-status

  echo # Add some space for readability.
}

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
  local tmpFile="${@%/}.tar";
  tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

  size=$(
    stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
    stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
  );

  local cmd="";
  if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli";
  else
    if hash pigz 2> /dev/null; then
      cmd="pigz";
    else
      cmd="gzip";
    fi;
  fi;

  echo "Compressing .tar using \`${cmd}\`â€¦";
  "${cmd}" -v "${tmpFile}" || return 1;
  [ -f "${tmpFile}" ] && rm "${tmpFile}";
  echo "${tmpFile}.gz created successfully.";
}

# Compare original and gzipped file size
function gz() {
  local origsize=$(wc -c < "$1");
  local gzipsize=$(gzip -c "$1" | wc -c);
  local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
  printf "orig: %d bytes\n" "$origsize";
  printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* *;
  fi;
}

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1");
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8";
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Create a git.io short URL
function gitio() {
  if [ -z "${1}" -o -z "${2}" ]; then
    echo "Usage: \`gitio slug url\`";
    return 1;
  fi;
  curl -i http://git.io/ -F "url=${2}" -F "code=${1}";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
  local port="${1:-4000}";
  local ip=$(ipconfig getifaddr en1);
  sleep 1 && open "http://${ip}:${port}/" &
  php -S "${ip}:${port}";
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
  if [ $# -eq 0 ]; then
    subl .;
  else
    subl "$@";
  fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
  if [ $# -eq 0 ]; then
    open .;
  else
    open "$@";
  fi;
}

# Clone a simple chassis to the passed project folder.
function load_chassis() {

  # Create the project directory, change into it and remember it to change back when we're done.
  mkdir -p "$1" && pushd "$_" > /dev/null

  echo "Project folder used: `pwd`"

  proceed=true

  # If the projectdir isn't empty, pop the question to delete all the files.
  filelist=`ls -A`

  if [ -n "$filelist" ]; then
    # Ask the question - use /dev/tty in case stdin is redirected from somewhere else.
    read -p "Project folder isn't empty! Delete everything in it and setup Chassis? [y/N] " REPLY < /dev/tty

    case "$REPLY" in
      Y|y) rm -rf $filelist ;;
      *) proceed=false ;;
    esac
  fi

  if $proceed; then
    echo "Cloning Chassis..."
    git clone --depth=1 --recursive https://github.com/Chassis/Chassis.git .
    git clone --depth=1 --recursive https://github.com/Chassis/phpMyAdmin.git extensions/phpmyadmin
  else
    echo "Cancelled."
  fi

  # Change back to previous folder.
  popd > /dev/null
}

# Get a fresh background every day.
function daily_background() {
  dest="/usr/local/share/backgrounds/daily-`date +%y%m%d`.jpg";
  if [[ ! -f "$dest" ]]; then
    # Make sure we have a working internet connection.
    /sbin/ping -q -c 1 `dig +short myip.opendns.com @resolver1.opendns.com` > /dev/null || exit 1;

    pic=`curl -s http://image-a-day.herokuapp.com/image | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["imageUrl"];'`;
    /usr/local/bin/wget -q "$pic" -O "$dest";
    sqlite3 ~/Library/Application\ Support/Dock/desktoppicture.db "update data set value = '$dest'";
    killall Dock;
  fi
}
