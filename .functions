#!/usr/local/env bash

_otp_complete() {
  COMPREPLY=()

  if [ "$COMP_CWORD" -eq 1 ]; then
    # Insert ".*" inbetween all characters, to match in total wildcard fashion, keeping original "." characters
    local -r WORD="$(echo "${2}" | sed 's/.* //;s/\(.\)/\1.*/g' | sed 's/\.\./\\\.\./g')"
    COMPREPLY=($(compgen -W "$(otp -l | grep -i "${WORD}")"))
  fi
} && complete -F _otp_complete -o default otp

# Switch the brew PHP version
function phpswitch() {
  local -r PHPVERS="$(brew list | grep -E '^php\d{2}$')"
  if brew --prefix "php$1" &>/dev/null; then
    # Has a valid version been passed?
    brew unlink "${PHPVERS}" &>/dev/null
    brew link "php$1" &>/dev/null
    echo "Success!"
  else
    if [ ! -z "$1" ]; then
      printf "Invalid selection! "
    fi
    echo "No change."
    echo "Available versions:"
    echo "${PHPVERS}"
  fi
  echo "Current PHP version: $(php <<< '<?php echo PHP_VERSION;')"
}

# Create symbolic links to all brew and MAMP php versions.
function phplinkify() {
  local -r PHPDIR=

  # Symlinks for PHP brew
  local -r PHPDIRBREW="/usr/local/php-brew"
  rm -rf "${PHPDIRBREW}"
  mkdir -p "${PHPDIRBREW}"
  echo "Linkifying brew PHP versions..."
  for PHPVER in $(brew list | grep -E '^php\d{2}$'); do
    PHPDIR="$(brew --prefix "${PHPVER}")"
    ln -sf "${PHPDIR}" "${PHPDIRBREW}/${PHPVER}"
    ln -sf "${PHPDIR}/bin/php" "/usr/local/bin/${PHPVER}-brew"
    echo "- ${PHPVER}: ${PHPDIR}/bin/php -> /usr/local/bin/${PHPVER}-brew"
  done
  echo "Done!"
  echo

  # Symlinks for PHP MAMP
  local -r PHPDIRMAMP="/usr/local/php-mamp"
  rm -rf "${PHPDIRMAMP}"
  mkdir -p "${PHPDIRMAMP}"
  echo "Linkifying MAMP PHP versions..."
  # see: https://embraceubuntu.com/2005/10/19/list-only-the-directories/
  for PHPVER in $(ls -d "/Applications/MAMP/bin/php"/*/ | xargs basename | sed 's/\.//g' | cut -b 1-5); do
    local -r MAJOR="${PHPVER:3:1}"
    local -r MINOR="${PHPVER:4:1}"
    PHPDIR="/Applications/MAMP/bin/php/php${MAJOR}.${MINOR}*"
    ln -sf "${PHPDIR}" "${PHPDIRMAMP}/${PHPVER}"
    ln -sf "${PHPDIR}/bin/php" "/usr/local/bin/${PHPVER}-mamp"
    echo "- ${PHPVER}: ${PHPDIR}/bin/php -> /usr/local/bin/${PHPVER}-mamp"
  done
  echo "Done!"
}

# Output a stripped vagrant global-status and adds tab completion for vagrant box ids for custom vagrant aliases.
function vglobal-status() {
  local -r READING=0
  local -r STATUS=
  VAGRANT_MACHINE_IDS=

  case "${1}" in
    # Prune the vagrant boxes global status cache if requested.
    prune) vagrant global-status --prune >/dev/null 2>&1 ;;

    # Filter by status.
    aborted|poweroff|running|suspended) STATUS="${1}" ;;
  esac

  echo # Add some space for readability.

  while read -r line; do

    # Wait for the entries to start and stop when we reach the empty line.
    case "${line}" in
      "-"*) READING=1; continue ;; # Next line has the first id.
      "") break ;; # Looks like we've finished reading all the ids.
    esac

    # If we're not reading ids yet, get the next line.
    [ "${READING}" -eq 0 ] && continue

    # Get the id from this line and add it to the array.
    local -r ID=(${line// / })
    VAGRANT_MACHINE_IDS=(${VAGRANT_MACHINE_IDS[@]} ${ID[0]})

    # Output the current line.
    [[ -z "${STATUS}" || "${line}" = *" ${STATUS} "* ]] && echo "${line}"

  done < <(vagrant global-status)

  # Join the ids with a space and make tab completions for our custom aliases.
  VAGRANT_MACHINE_IDS=$(printf " %s" "${VAGRANT_MACHINE_IDS[@]}")

  # Auto complete commands.
  complete -o "nospace" -W "${VAGRANT_MACHINE_IDS:1}" vdestroy vhalt vprovision vreload vresume vssh vssh-config vstatus vsuspend vup

  complete -o "nospace" -W "box connect destroy global-status halt help init login package plugin port powershell provision push rdp reload resume share snapshot ssh ssh-config status suspend up version" vagrant
  complete -o "nospace" -W "aborted poweroff running suspended prune" vglobal-status

  # source: http://stackoverflow.com/a/5303225
  _vbox_complete() {
    COMPREPLY=()

    if [ "$COMP_CWORD" -eq 1 ]; then
      COMPREPLY=($(compgen -W "add list outdated remove repackage update" -- "${2}"))
    elif [ "$COMP_CWORD" -eq 2 ]; then
      case "$3" in
        outdated|update) COMPREPLY=($(compgen -W "${VAGRANT_MACHINE_IDS:1}" -- "${2}")) ;;
      esac
    fi

    return 0
  } && complete -F _vbox_complete vbox

  _vsnapshot_complete() {
    COMPREPLY=()

    if [ "$COMP_CWORD" -eq 1 ]; then
      COMPREPLY=($(compgen -W "delete list pop push restore save" -- "${2}"))
    elif [ "$COMP_CWORD" -eq 2 ]; then
      case "$3" in
        list) COMPREPLY=($(compgen -W "${VAGRANT_MACHINE_IDS:1}" -- "${2}")) ;;
      esac
    fi

    return 0
  } && complete -F _vsnapshot_complete vsnapshot

  echo # Add some space for readability.
}

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_" || exit;
}

# Show the history and execute any entry by passing it's entry number
function h() {
  if [ -z "${1}" ]; then
    eval "history"
    return 0
  fi

  local -r CMD="$(history | sed -n -E "s/^\ *${1}\ *(.*)$/\1/p")"

  if [ -z "${CMD}" ]; then
    echo "Invalid entry: ${1}"
    return 1
  fi

  read -p "Execute '${CMD}'? (y/N): " REPLY < /dev/tty
  case "${REPLY}" in
    Y|y) eval "${CMD}" ;;
    *) echo "Cancelled" ;;
  esac
}

# Create a new temporary directory and enter it
HOMETMP="${HOME}/.tmp"
function t() {
  if [ ! -z "${1}" ]; then
    if [ -d "${HOMETMP}/${1}" ]; then
      cd "${HOMETMP}/${1}" || exit
    else
      echo "Invalid tmp folder!"
    fi
  else
    mkdir -p "${HOMETMP}/$(rnd 8)" && cd "$_" || exit
  fi
}
_t_complete() {
  # Insert ".*" inbetween all characters, to match in total wildcard fashion
  local -r WORD="$(echo "${2}" | sed 's/.* //;s/\(.\)/\1.*/g')"
  COMPREPLY=($(compgen -W "$(ls -d "${HOMETMP}"/*/ | xargs basename | sed 's/\.//g' | grep -i "${WORD}")"))
} && complete -F _t_complete t

# Output a random string with the length of the first param, or 32 by default
function rnd() {
  echo "$(LC_ALL=C; cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w "${1:-32}" | head -n 1)"
}

# Extract ANY compressed file.
# source: https://github.com/xvoland/Extract/blob/master/extract.sh
function extract() {
  if [ -z "${1}" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
  else
    if [ -f "${1}" ] ; then
      local -r NAME="${1%.*}"
      mkdir "${NAME}" && cd "${NAME}" || exit
      case "${1}" in
        *.tar.bz2)   tar xvjf "../${1}"                  ;;
        *.tar.gz)    tar xvzf "../${1}"                  ;;
        *.tar.xz)    tar xvJf "../${1}"                  ;;
        *.lzma)      unlzma "../${1}"                    ;;
        *.bz2)       bunzip2 "../${1}"                   ;;
        *.rar)       unrar x -ad "../${1}"               ;;
        *.gz)        gunzip "../${1}"                    ;;
        *.tar)       tar xvf "../${1}"                   ;;
        *.tbz2)      tar xvjf "../${1}"                  ;;
        *.tgz)       tar xvzf "../${1}"                  ;;
        *.zip)       unzip "../${1}"                     ;;
        *.Z)         mv "../${1}" . && uncompress "${1}" ;;
        *.7z)        7z x "../${1}"                      ;;
        *.xz)        unxz "../${1}"                      ;;
        *.exe)       cabextract "../${1}"                ;;
        *)           echo "extract: '${1}' - unknown archive method" ;;
      esac
    else
      echo "${1} - file does not exist"
    fi
  fi
}

# Change working directory to the top-most Finder window location
function cdf() { # short for $(cdfinder)
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')" || exit
}

# Create a .tar.gz archive, using zopfli, pigz or gzip for compression
function targz() {
  local -r TMPFILE="${@%/}.tar"
  echo "$TMPFILE"
  return 0
  tar -cvf "${TMPFILE}" --exclude=".DS_Store" "${@}" || return 1

  local -r SIZE=$(
    stat -f"%z" "${TMPFILE}" 2>/dev/null; # OS X stat
    stat -c"%s" "${TMPFILE}" 2>/dev/null # GNU stat
  )

  local -r CMD=
  if (( SIZE < 52428800 )) && hash zopfli 2>/dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available, use it
    CMD="zopfli"
  else
    if hash pigz 2>/dev/null; then
      CMD="pigz"
    else
      CMD="gzip"
    fi
  fi

  echo "Compressing .tar using '${CMD}'..."
  "${CMD}" -v "${TMPFILE}" || return 1
  [ -f "${TMPFILE}" ] && rm "${TMPFILE}"
  echo "${TMPFILE}.gz created successfully."
}

# Compare original and gzipped file size
function gz() {
  local -r ORIGSIZE="$(wc -c < "$1")"
  local -r GZIPSIZE="$(gzip -c "$1" | wc -c)"
  local -r RATIO="$(echo "${GZIPSIZE} * 100 / ${ORIGSIZE}" | bc -l)"

  printf "orig: %d bytes\n" "${ORIGSIZE}"
  printf "gzip: %d bytes (%2.2f%%)\n" "${GZIPSIZE}" "${RATIO}"
}

# Determine size of a file or total size of a directory
function fs() {
  local -r ARG="-sh"

  if \du -b/dev/null >/dev/null 2>&1; then
    ARG="-sbh"
  fi
  if [[ -n "$@" ]]; then
    \du "${ARG}" -- "$@"
  else
    \du "${ARG}" .[^.]* *
  fi;
}

# Create a data URL from a file
function dataurl() {
  local -r MIMETYPE="$(file -b --mime-type "${1}")"

  if [[ "$MIMETYPE" == text/* ]]; then
    MIMETYPE="${MIMETYPE};charset=utf-8"
  fi
  echo "data:${MIMETYPE};base64,$(openssl base64 -in "${1}" | tr -d '\n')"
}

# Create a git.io short URL
function gitio() {
  if [ -z "${1}" ] || [ -z "${2}" ]; then
    echo "Usage: gitio slug url"
    return 1
  fi
  curl -i "http://git.io/" -F "url=${2}" -F "code=${1}"
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
  local -r PORT="${1:-4000}"
  local -r IP="$(ipconfig getifaddr en1)"
  sleep 1 && open "http://${IP}:${PORT}/" &
  php -S "${IP}:${PORT}"
}

# Run dig and display the most useful info
function digga() {
  dig +nocmd "${1}" any +multiline +noall +answer
}

# s with no arguments opens the current directory in Sublime Text, otherwise opens the given location
function s() {
  local -r SUBL="/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl"
  if [ "$#" -eq 0 ]; then "${SUBL}" .; else "${SUBL}" "$@"; fi
}

# o with no arguments opens the current directory, otherwise opens the given location
function o() {
  if [ "$#" -eq 0 ]; then open .; else open "$@"; fi
}

# Clone a simple chassis to the passed project folder.
function load_chassis() {
  local -r PROCEED=true

  # Create the project directory, change into it and remember it to change back when we're done.
  mkdir -p "$1" && pushd "$_" >/dev/null

  echo "Project folder used: $(pwd)"

  # If the projectdir isn't empty, pop the question to delete all the files.
  local -r FILELIST=$(ls -A)

  if [ -n "${FILELIST}" ]; then
    # Ask the question - use /dev/tty in case stdin is redirected from somewhere else.
    read -p "Project folder isn't empty! Delete everything in it and setup Chassis? [y/N] " REPLY < /dev/tty

    case "$REPLY" in
      Y|y) rm -rf "${FILELIST}" ;;
      *) PROCEED=false ;;
    esac
  fi

  if "${PROCEED}"; then
    echo "Cloning Chassis..."
    git clone --depth=1 --recursive "https://github.com/Chassis/Chassis.git" .
    git clone --depth=1 --recursive "https://github.com/Chassis/phpMyAdmin.git" "extensions/phpmyadmin"
  else
    echo "Cancelled."
  fi

  # Change back to previous folder.
  popd >/dev/null
}

# Get a fresh background every day.
function daily_background() {
  local -r DEST="/usr/local/share/backgrounds/daily-$(date +%y%m%d).jpg"
  local -r PIC="https://source.unsplash.com/category/nature/daily"

  if [[ ! -f "${DEST}" || ! -s "${DEST}" || "${1}" == "-f" ]]; then
    # Make sure we have a working internet connection.
    /sbin/ping -q -c 1 "$(dig +short myip.opendns.com @resolver1.opendns.com)" >/dev/null || exit 1;

    /usr/local/bin/wget -q "${PIC}" -O "${DEST}"
    sqlite3 "${HOME}/Library/Application Support/Dock/desktoppicture.db" "update data set value = '${DEST}'"
    killall Dock
  fi
}

# Write an image to disk
function img2disk() {
  local -r IMG="${1}"
  local -r DSK="${2}"

  if [ -z "${IMG}" ] || [ -z "${DSK}" ]; then
    echo "Usage: img2disk <path/image>.<img|zip|xz> <path/disk>"
  elif [ ! -f "${IMG}" ] ; then
    echo "${IMG} - file not found"
  elif [ ! -c "${DSK}" ] ; then
    echo "${DSK} - disk not found"
  else
    diskutil unmountDisk "${DSK}"

    case "${IMG}" in
      *.zip)  echo "Compressed zip file"
              SIZE=$(unzip -l "${IMG}" | tail -1 | awk '{print $1}')
              CMD="unzip -p ${IMG}"
              ;;
      *.xz)   echo "Compressed unxz file"
              SIZE=$(unxz --robot -l "${IMG}" | tail -1 | awk '{print $5}')
              CMD="unxz -c ${IMG}"
              ;;
      *)      echo "Uncompressed file"
              SIZE=$(wc -c "${IMG}" | awk '{print $1}')
              CMD="cat ${IMG}"
              ;;
    esac
    echo "File Size:    ${SIZE}"
    echo "Command:      ${CMD}"
    echo "Full Command: pv -tprebs ${SIZE} <(${CMD}) | sudo dd bs=8m of=${DSK}"

    pv -tprebs "${SIZE}" <("${CMD}") | sudo dd bs=8m of="${DSK}"

    diskutil eject "${DSK}"
  fi

  echo 'Done!'
}
